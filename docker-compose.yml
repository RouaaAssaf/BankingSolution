        

services:
  # Customer API
  customers.api:
    build:
      context: .
      dockerfile: src/Customers/Customers.Api/Dockerfile
    image: customersapi
    container_name: customers-api
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - UseDatabase=Mongo
      - Mongo__ConnectionString=mongodb://mongo:27017
      - Mongo__DatabaseName=CustomerDb
      - RabbitMq__ConnectionString=amqp://guest:guest@rabbitmq:5672/
      - RabbitMq__Exchange=domain.events
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Transactions API
  transactions.api:
    build:
      context: .
      dockerfile: src/Transactions/Transactions.Api/Dockerfile
    image: transactionsapi
    container_name: transactions-api
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - UseDatabase=Mongo
      - Mongo__ConnectionString=mongodb://mongo:27017
      - Mongo__DatabaseName=AccountDb
      - RabbitMq__ConnectionString=amqp://guest:guest@rabbitmq:5672/
      - RabbitMq__Exchange=domain.events
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # MongoDB
  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27018:27017" 
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # backend connection
      - "15672:15672" # management dashboard
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  mongo_data:
